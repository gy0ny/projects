####신한카드 
foreigner <- read.table("FOREIGNER.txt",sep="|",header=TRUE)
native <- read.table("NATIVE_RE.txt",sep="|",header=TRUE)
#결측치 제거, 지역 바꾸기
# 분류 1. 외국인 2. 내국인
# 데이터 바꾸고 내외국인 합치기 


#내국인 
native_1 <- native %>% separate(ta_ym,into = c("year","month"),sep=-2, convert=TRUE) %>% select(month,year)
native<- tibble(cbind(native,native_1))
native_2 <- native %>% unite(v4,v2,v3,sep=" ") %>% select(v4)
native<- tibble(cbind(native,native_2))

## 교통 삭제, 쇼핑, 숙박, 스포츠, 음식, 의료,체험
n_trip <- native %>% filter(v1 != v2)
n_trip  <- n_trip  %>% mutate( gb_new = fct_collapse(gb2,
                                                     "쇼핑" = c("관광쇼핑","종합쇼핑","패션쇼핑"),
                                                     "숙박" = c("숙박"),
                                                     "스포츠" = c("골프","레저스포츠","스키","운동경기관람","자전거","헬스"),
                                                     "음식" = c("외식","유흥"),
                                                     "의료,미용" = c("미용"),
                                                     "체험" = c("체험"),
                                                     "문화" = c("공연관람","미술공예참여"),
                                                     "관광" = c("여행사"),
                                                     "기타" = c("악기연주","음악감상","스포츠용품구매","교통","교육훈련","독서","목욕","애완동물돌보기","인터넷게임","종교활동","사진촬영")
))




#외국인 
foreigner_1 <- foreigner %>% separate(ta_ym,into = c("year","month"),sep=-2, convert=TRUE) %>% select(month,year)
foreigner<- tibble(cbind(foreigner,foreigner_1))
foreigner_2 <- foreigner %>% unite(v4,v2,v3,sep=" ") %>% select(v4)
foreigner<- tibble(cbind(foreigner,foreigner_2))
foreigner <- foreigner %>% filter(v2 != "*" & v3 != "*")
foreigner1 <- foreigner %>% filter(v1 == ""| v1 == "*") 
foreigner2 <- foreigner %>% filter(v1 != "" & v1 != "*") %>% select(-v4) # 모두 2020년 7월 이후 자료 
foreigner_2 <- foreigner2 %>% unite(v4,v1,v2,sep=" ") %>% select(v4)
foreigner2<- tibble(cbind(foreigner2,foreigner_2))
ff<- tibble(rbind(foreigner1,foreigner2))
ff <- ff %>% separate(v4, into=c("v5","v6"), sep=" ")
ff_1 <- ff %>% unite(v4,v5,v6,sep=" ") %>% select(v4)
ff<- tibble(cbind(ff,ff_1))
ff <- ff  %>% mutate( gb_new = fct_collapse(gb2,
                                            "쇼핑" = c("가전전자제품","기타쇼핑","기타지출","면세점","백화점","쇼핑몰","의류잡화","할인점/편의점","화장품"),
                                            "숙박" = c("1급2급호텔","특급호텔","그외숙박"),
                                            "스포츠" = c("당구장","레저스포츠","보트판매","볼링장","수영장","수중장비","스키장","스포츠센타/레포츠클럽","실내골프장","실외골프장","운동경기관람","자전거(성인용)","테니스장"),
                                            "음식" = c("유흥","음료제과","한식","한식외"),
                                            "의료,미용" = c("개인병원","보건소","산후조리원","약국","응급실운영  병원","의료기기,건강진단","접골원","종합병원","치과병원","한의원,한약방","이용,미용","피부미용"),
                                            "체험" = c("종합레저타운/놀이동산","오락시설","동물농장","목욕시설","수련원,체험장","수족관"),
                                            "문화" = c("공연장,극장"),
                                            "관광" = c("관광상품","관광여행사"),
                                            "기타" = c("기타")
))

##########EDA 그래프 그릴 자료 
EDA <- ff %>% group_by(v5) %>% count(wt=usec) %>% arrange(desc(n))
write.csv(EDA,"외국인 지역별 이용건수 EDA.csv",fileEncoding = "UTF-8")




############신한카드 업종 매출 
clu_f <- ff %>% filter(gb_new != "기타")  %>% group_by(v4,gb_new) %>% count(wt=vlm)
clu_n <- n_trip %>% filter(gb_new != "기타") %>% group_by(v4,gb_new) %>% count(wt=vlm)

clust <- full_join(clu_n,clu_f) %>% arrange(v4) %>% group_by(v4,gb_new) %>% count(wt=n) %>% spread(key=gb_new, value=n)
clust <- clust %>% mutate( v4 = fct_collapse(v4,
                                             "세종 세종시" = c("세종 .","세종 세종"),
                                             )) 

names(clust) <- c("v4","s1","s2","s3","s4","s5","s6","s7","s8")
clust2 <- clust %>% group_by(v4) %>% count(wt=s1)
clust1 <- clust %>% group_by(v4) %>% count(wt=s1)
clust1$s1 <- clust2$n
clust1 <- clust1 %>% select(-n)
clust2 <- clust %>% group_by(v4) %>% count(wt=s2)
clust1$s2 <- clust2$n
clust2 <- clust %>% group_by(v4) %>% count(wt=s3)
clust1$s3 <- clust2$n
clust2 <- clust %>% group_by(v4) %>% count(wt=s4)
clust1$s4 <- clust2$n
clust2 <- clust %>% group_by(v4) %>% count(wt=s5)
clust1$s5 <- clust2$n
clust2 <- clust %>% group_by(v4) %>% count(wt=s6)
clust1$s6 <- clust2$n
clust2 <- clust %>% group_by(v4) %>% count(wt=s7)
clust1$s7 <- clust2$n
clust2 <- clust %>% group_by(v4) %>% count(wt=s8)
clust1$s8 <- clust2$n
clust <- clust1
write.csv(clust,"cluster_합.csv",fileEncoding = "UTF-8")

clust <- clust %>% mutate(whole=스포츠+문화+쇼핑+`의료,미용`+숙박+관광+음식+체험)
clust <- clust %>% mutate(s1 = 스포츠/whole,
                          s2 = 문화/whole,
                          s3 = 쇼핑/whole,
                          s4 = `의료,미용`/whole,
                          s5 = 숙박/whole,
                          s6 = 관광/whole,
                          s7 = 음식/whole,
                          s8 = 체험/whole,
)
clust <- clust %>% select(v4,s1,s2,s3,s4,s5,s6,s7,s8)
clust$region <- clust$v4
clust <- clust %>% ungroup() %>% select(-v4)







####현지인 이용건수  vs 외지인 이용건수 
(n_in <- native %>% filter(v1 == v2) %>% group_by(v4) %>% count(wt=usec))
(n_ex <- native %>% filter(v1 != v2) %>% group_by(v4) %>% count(wt=usec))
n_new <- n_ex
names(n_new) <-c("region","usec_ex")
n_new$usec_in <- n_in$n
n_new <- n_new %>% mutate( ratio_in_ex = usec_in/usec_ex)
n_new %>% arrange(desc(ratio_in_ex))
n_new %>% arrange(ratio_in_ex)
write.csv(n_new,"현지인 대 외지인.csv",fileEncoding = "UTF-8")




############## 방문자수 데이터 셋 
df <-read.csv(file.choose(),header=T) 
df <- tibble(df)
names(df) <- c("index","region","외국인","전년대비증가","외부방문자","외지인","전년외부","현지인")
df <-  df %>% filter( index != "구분")
unique(df$region)
df <- df %>% select(-전년대비증가)
df <- df %>% mutate( region = fct_collapse(region,
                                           "세종 세종시" = c("세종 세종특별자치시"),
                                           "경기 성남시"=c("경기 성남시 중원구","경기 성남시 수정구","경기 성남시 분당구"),
                                           "경기 수원시"=c("경기 수원시 팔달구","경기 수원시 장안구","경기 수원시 영통구","경기 수원시 권선구"),
                                           "경기 안산시"=c("경기 안산시 상록구","경기 안산시 단원구"),
                                           "경기 안양시"=c("경기 안양시 만안구","경기 안양시 동안구"),
                                           "경기 용인시"=c("경기 용인시 처인구","경기 용인시 수지구",	"경기 용인시 기흥구"),
                                           "경남 창원시"=c("경남 창원시 진해구","경남 창원시 의창구","경남 창원시 성산구","경남 창원시 마산회원구","경남 창원시 마산합포구"),
                                           "경북 포항시"=c("경북 포항시 북구","경북 포항시 남구"),
                                           "인천 남구"=c("인천 남동구"),
                                           "전북 전주시"=c("전북 전주시 완산구","전북 전주시 덕진구"),
                                           "충남 천안시"=c("충남 천안시 서북구","충남 천안시 동남구"),
                                           "충북 청주시" =c("충북 청주시 흥덕구","충북 청주시 청원구","충북 청주시 서원구","충북 청주시 상당구")
)) 


df$외국인 <- as.numeric(df$외국인)
df$외부방문자 <- as.numeric(df$외부방문자)
df$외지인 <- as.numeric(df$외지인)
df$전년외부 <- as.numeric(df$전년외부)
df$현지인 <- as.numeric(df$현지인)
df1 <- df %>% group_by(region) %>% count(wt=외국인)
df2 <- df %>% group_by(region) %>% count(wt=외국인)
df1$외국인 <- df2$n
df1 <- df1 %>% select(-n)
df2 <- df %>% group_by(region) %>% count(wt=외부방문자)
df1$외부방문자 <- df2$n
df2 <- df %>% group_by(region) %>% count(wt=외지인)
df1$외지인 <- df2$n
df2 <- df %>% group_by(region) %>% count(wt=전년외부)
df1$전년외부 <- df2$n
df2 <- df %>% group_by(region) %>% count(wt=현지인)
df1$현지인 <- df2$n
df <- df1
df %>% view()
write.csv(df,"방문자수.csv",fileEncoding = "UTF-8")




########### 크롤링데이터 지역 한글이름 대치
cc1 <-read.csv(file.choose(),header=T) 
cc <-read.csv(file.choose(),header=T) 
cc <- cc %>% mutate( region = fct_collapse(region,
                                           "강원 강릉시" = 'gangneung', 
                                           "강원 동해시" = 'donghae' , 
                                           "강원 춘천시" = 'chuncheon' , 
                                           "강원 삼척시" = 'samcheok', 
                                           "강원 원주시" = 'wonju' , 
                                           "강원 속초시" = 'sokcho'  , 
                                           "강원 고성군" = 'gangwon_goseong', 
                                           "강원 양구군" = 'yanggu' ,
                                           "강원 태백시" = 'taebaek' ,
                                           "강원 양양군" = 'yangyang' , 
                                           "강원 영월군" = 'yeongwol', 
                                           "강원 인제군" = 'inje',
                                           "강원 횡성군"  = 'hoengseong', 
                                           "강원 평창군"= 'pyeongchang', 
                                           "강원 정선군" = 'jeongseon', 
                                           "강원 홍천군" = 'hongcheon', 
                                           "강원 철원군" = 'cheolwon', 
                                           "강원 화천군" = 'hwacheon',
                                           
                                           "경기 김포시"= 'gimpo',
                                           "경기 군포시" = 'gunpo',
                                           "경기 광명시" = 'gwangmyeong',
                                           "경기 연천군" = 'yeoncheon', 
                                           "경기 안성시" = 'anseong', 
                                           "경기 부천시" = 'bucheon',
                                           "경기 이천시" = 'icheon', 
                                           "경기 포천시" = 'pocheon', 
                                           "경기 가평군"= 'gapyeong', 
                                           "경기 고양시" = 'goyang', 
                                           "경기 안산시" = 'ansan', 
                                           "경기 구리시" = 'guri', 
                                           "경기 오산시" = 'osan', 
                                           "경기 양평군" = 'yangpyeong', 
                                           "경기 의정부시" = 'uijeongbu', 
                                           "경기 동두천시" = 'dongducheon',
                                           "경기 과천시" = 'gwacheon',
                                           "경기 안양시" = 'anyang', 
                                           "경기 수원시" = 'suwon', 
                                           "경기 남양주시" = 'namyangju',
                                           "경기 화성시" = 'hwaseong',
                                           "경기 용인시" = 'yongin',
                                           "경기 파주시" = 'paju',
                                           "경기 평택시" = 'pyeongtaek',
                                           "경기 하남시" = 'hanam',
                                           "경기 시흥시" = 'siheung',
                                           "경기 양주시" = 'yangju', 
                                           "경기 광주시" = 'gyeonggi_gwangju',
                                           "경기 여주시" = 'yeoju',
                                           "경기 성남시"= 'seongnam',
                                           "경기 의왕시" = 'uiwang',
                                           
                                           "경남 거제시" = 'geoje',
                                           "경남 밀양시" = 'miryang',
                                           "경남 김해시" = 'gimhae',
                                           "경남 통영시" = 'tongyeong',
                                           "경남 거창군" = 'geochang', 
                                           "경남 진주시" = 'jinju',
                                           "경남 고성군" = 'gyeongnam_goseong',
                                           "경남 사천시" = 'sacheon', 
                                           "경남 남해군" = 'namhae',
                                           "경남 양산시" = 'yangsan', 
                                           "경남 산청군" = 'sancheong', 
                                           "경남 하동군" = 'hadong', 
                                           "경남 창녕군" = 'changnyeong', 
                                           "경남 함안군" = 'haman',
                                           "경남 함양군" = 'hamyang',
                                           "경남 의령군" = 'uiryeong',
                                           "경남 창원시"  = 'changwon',
                                           "경남 합천군" = 'hapcheon',
                                           
                                           "경북 경주시"=  'gyeongju',
                                           "경북 경산시" = 'gyeongsan',
                                           "경북 고령군"='goryeong',
                                           "경북 안동시" = 'andong', 
                                           "경북 김천시" ='gimcheon', 
                                           "경북 포항시"='pohang', 
                                           "경북 영주시" = 'yeongju', 
                                           "경북 문경시"='mungyeong',
                                           "경북 상주시"='sangju',
                                           "경북 구미시"='gumi',
                                           "경북 영천시" ='yeongcheon',
                                           "경북 군위군" = 'gunwi', 
                                           "경북 봉화군"  ='bonghwa',
                                           "경북 영덕군" ='yeongdeok',
                                           "경북 성주군" ='seongju', 
                                           "경북 울릉군"  ='ulleung',
                                           "경북 예천군"  ='yecheon', 
                                           "경북 의성군" ='uiseong',
                                           "경북 영양군" ='yeongyang',
                                           "경북 청송군" ='cheongsong',
                                           "경북 청도군" ='cheongdo',
                                           "경북 울진군" ='uljin',
                                           "경북 칠곡군" ='chilgok',
                                           
                                           "광주 서구" = 'gwangju_seogu', 
                                           "광주 동구"  =  'gwangju_donggu', 
                                           "광주 광산구"= 'gwangsan', 
                                           "광주 북구"  = 'gwangju_bukgu', 
                                           "광주 남구" = 'gwangju_namgu',
                                           
                                           "대구 동구" =   'daegu_donggu', 
                                           "대구 남구" =   'daegu_namgu',
                                           "대구 서구" = 'daegu_seogu',
                                           "대구 중구" = 'daegu_junggu',
                                           "대구 달서구" =  'dalseo', 
                                           "대구 북구"  ='daegu_bukgu', 
                                           "대구 수성구" = 'suseong', 
                                           "대구 달성군" = 'dalseong',
                                           
                                           "대전 중구" = 'daejeon_junggu',
                                           "대전 동구" = 'daejeon_donggu',
                                           "대전 대덕구" = 'daedeok',
                                           "대전 서구" = 'daejeon_seogu', 
                                           "대전 유성구" = 'yuseong',
                                           
                                           "부산 서구" ='busan_seogu',
                                           "부산 영도구" ='yeongdo',
                                           "부산 중구" ='busan_junggu', 
                                           "부산 동구"  ='busan_donggu',
                                           "부산 해운대구" ='haeundae', 
                                           "부산 금정구"='Geumjeong',
                                           "부산 동래구"  ='dongnae',
                                           "부산 북구"   ='busan_bukgu',
                                           "부산 사하구" ='saha',
                                           "부산 부산진구" ='busanjin', 
                                           "부산 남구"  ='busan_namgu', 
                                           "부산 수영구"  ='suyeong', 
                                           "부산 연제구" ='yeonje', 
                                           "부산 강서구" = 'busan_gangseo',
                                           "부산 사상구"  ='sasang',
                                           "부산 기장군" = 'gijang',
                                           '서울 종로구'='jongno', 
                                           '서울 중구'='seoul_junggu', 
                                           '서울 용산구'='yongsan', 
                                           '서울 노원구'='nowon', 
                                           '서울 성동구'='seongdong', 
                                           '서울 동대문구'='dongdaemun', 
                                           '서울 강북구'='seoul_gangbuk', 
                                           '서울 도봉구'='dobong', 
                                           '서울 중랑구'='jungnang', 
                                           '서울 성북구'='seongbuk', 
                                           '서울 광진구'='gwangjin', 
                                           '서울 은평구'='eunpyeong', 
                                           '서울 양천구'='yangcheon', 
                                           '서울 구로구'='guro', 
                                           '서울 강서구'='seoul_gangseo', 
                                           '서울 서대문구'='seodaemun',  
                                           '서울 영등포구'='yeongdeungpo', 
                                           '서울 마포구'='mapo', 
                                           '서울 금천구'='geumcheon',  
                                           '서울 서초구'='seocho', 
                                           '서울 동작구'='dongjak', 
                                           '서울 관악구'='gwanak', 
                                           '서울 송파구'='songpa', 
                                           '서울 강동구'='seoul_gangdong', 
                                           '서울 강남구'='seoul_gangnam',  
                                           
                                           "울산 중구"  ='ulsan_junggu', 
                                           "울산 남구" ='ulsan_namgu',  
                                           "울산 동구"  ='ulsan_donggu', 
                                           "울산 북구"='ulsan_bukgu', 
                                           "울산 울주군"='ulju',
                                           
                                           "인천 동구"  ='incheon_donggu', 
                                           "인천 중구"='incheon_junggu', 
                                           "인천 옹진군" ='ongjin', 
                                           "인천 서구"='incheon_seogu', 
                                           "인천 연수구"='yeonsu', 
                                           "인천 부평구" ='bupyeong', 
                                           '인천 남동구'='namdonggu', 
                                           "인천 미추홀구" ='michuhol', 
                                           "인천 계양구" ='gyeyang', 
                                           "인천 강화군"  ='ganghwa',
                                           
                                           "전남 완도군" ='wando', 
                                           "전남 신안군"  ='sinan',
                                           "전남 진도군" ='jindo', 
                                           "전남 무안군" ='muan',
                                           "전남 보성군"='boseong', 
                                           "전남 화순군"='hwasun', 
                                           "전남 광양시"='gwangyang', 
                                           "전남 순천시"='suncheon', 
                                           "전남 함평군"='hampyeong', 
                                           "전남 담양군" ='damyang',
                                           "전남 목포시" ='mokpo', 
                                           "전남 나주시" ='naju', 
                                           "전남 해남군"='haenam', 
                                           "전남 구례군"='gurye', 
                                           "전남 장성군"='jangseong', 
                                           "전남 고흥군" ='goheung', 
                                           "전남 영광군"='yeonggwang', 
                                           "전남 장흥군"='jangheung', 
                                           "전남 곡성군" ='gokseong', 
                                           "전남 강진군"='gangjin', 
                                           "전남 영암군"='yeongam', 
                                           "전남 여수시" ='yeosu',
                                           
                                           "전북 김제시"='gimje', 
                                           "전북 부안군"='buan',
                                           "전북 군산시"='gunsan',
                                           "전북 정읍시"='jeongeup',
                                           "전북 남원시"='namwon', 
                                           "전북 장수군" ='jangsu',
                                           "전북 익산시"='iksan',
                                           "전북 무주군"='muju', 
                                           "전북 전주시" ='jeonju', 
                                           "전북 완주군"='wanju', 
                                           "전북 임실군"='imsil', 
                                           "전북 진안군"='jinan', 
                                           "전북 고창군" ='gochang', 
                                           "전북 순창군" ='sunchang',
                                           
                                           "충남 태안군"='taean', 
                                           "충남 보령시"='boryeong', 
                                           "충남 당진시"='dangjin',
                                           "충남 논산시"='nonsan', 
                                           "충남 서천군"='seocheon', 
                                           "충남 부여군"='buyeo', 
                                           "충남 공주시" ='gongju', 
                                           "충남 예산군" ='yesan', 
                                           "충남 홍성군"='hongseong', 
                                           "충남 천안시" ='cheonan', 
                                           "충남 서산시"='seosan', 
                                           "충남 아산시"='asan', 
                                           "충남 계룡시"='gyeryong', 
                                           "충남 금산군"='geumsan', 
                                           "충남 청양군" ='cheongyang',
                                           
                                           "충북 청주시"  ='cheongju', 
                                           "충북 보은군" ='boeun',
                                           "충북 음성군" ='eumseong',
                                           "충북 진천군"='jincheon', 
                                           "충북 괴산군"='goesan', 
                                           "충북 충주시"='chungju',
                                           "충북 제천시"='jecheon',
                                           "충북 단양군"='danyang',
                                           "충북 옥천군"='okcheon', 
                                           "충북 증평군"='jeungpyeong',
                                           "충북 영동군"='yeongdong',
                                           "세종 세종시" = "sejong",
                                           "제주 제주시" = "jejusi",
                                           "제주 서귀포시" = "seogwipo"
))

cc1$region1 <- cc$region
write.csv(cc1,"cluster_result_한글추가.csv",fileEncoding = "UTF-8")



##### 기초지자체 방문자수 전처리 ##############
library(tidyverse)
dat1<-read.csv("기초지자체 방문자수_20210723.csv", header=T) 
dat2<-read.csv("기초지자체 방문자수_20210723-2.csv", header=T) 
dat3<-read.csv("기초지자체 방문자수_20210723-3.csv", header=T) 
dat4<-read.csv("기초지자체 방문자수_20210723-4.csv", header=T) 
dat5<- read.csv("기초지자체 방문자수_20210723-5.csv", header=T) 
dat6<-read.csv("기초지자체 방문자수_20210723-6.csv", header=T) 
dat7<-read.csv("기초지자체 방문자수_20210723-7.csv", header=T) 
dat8<-read.csv("기초지자체 방문자수_20210723-8.csv", header=T) 
dat9<-read.csv("기초지자체 방문자수_20210723-9.csv", header=T) 
dat10<-read.csv("기초지자체 방문자수_20210723-10.csv", header=T) 
dat11<-read.csv("기초지자체 방문자수_20210723-11.csv", header=T) 
dat12<-read.csv("기초지자체 방문자수_20210723-12.csv", header=T) 
dat13<-read.csv("기초지자체 방문자수_20210723-13.csv", header=T) 
dat14<-read.csv("기초지자체 방문자수_20210723-14.csv", header=T) 
dat15<-read.csv("기초지자체 방문자수_20210723-15.csv", header=T) 
dat16<-read.csv("기초지자체 방문자수_20210723-16.csv", header=T) 
dat17<-read.csv("기초지자체 방문자수_20210723-17.csv", header=T) 

dat1 <- tibble(dat1) #서울
dat2 <- tibble(dat2) # 부산
dat3 <- tibble(dat3) # 대구
dat4 <- tibble(dat4) # 인천
dat5<- tibble(dat5) #광주
dat6 <- tibble(dat6)#대전
dat7 <- tibble(dat7)#울산
dat8 <- tibble(dat8) #세종
dat9 <- tibble(dat9)#경기
dat10 <- tibble(dat10)#강원
dat11 <- tibble(dat11)#충북
dat12 <- tibble(dat12)#충남
dat13 <- tibble(dat13)#전북
dat14 <- tibble(dat14)#전남
dat15 <- tibble(dat15)#경북
dat16 <- tibble(dat16)#경남
dat17 <- tibble(dat17)#제주

dat1$도 <- rep("서울",nrow(dat1))
dat1 <- dat1 %>% unite(지역,도,지역,sep=" ")
dat2$도 <- rep("부산",nrow(dat2))
dat2 <- dat2 %>% unite(지역,도,지역,sep=" ")
dat3$도 <- rep("대구",nrow(dat3))
dat3 <- dat3 %>% unite(지역,도,지역,sep=" ")
dat4$도 <- rep("인천",nrow(dat4))
dat4 <- dat4 %>% unite(지역,도,지역,sep=" ")
dat5$도 <- rep("광주",nrow(dat5))
dat5 <- dat5 %>% unite(지역,도,지역,sep=" ")
dat6$도 <- rep("대전",nrow(dat6))
dat6 <- dat6 %>% unite(지역,도,지역,sep=" ")
dat7$도 <- rep("울산",nrow(dat7))
dat7 <- dat7 %>% unite(지역,도,지역,sep=" ")
dat8$도 <- rep("세종",nrow(dat8))
dat8 <- dat8 %>% unite(지역,도,지역,sep=" ")
dat9$도 <- rep("경기",nrow(dat9))
dat9 <- dat9 %>% unite(지역,도,지역,sep=" ")
dat10$도 <- rep("강원",nrow(dat10))
dat10 <- dat10 %>% unite(지역,도,지역,sep=" ")
dat11$도 <- rep("충북",nrow(dat11))
dat11 <- dat11 %>% unite(지역,도,지역,sep=" ")
dat12$도 <- rep("충남",nrow(dat12))
dat12 <- dat12 %>% unite(지역,도,지역,sep=" ")
dat13$도 <- rep("전북",nrow(dat13))
dat13 <- dat13 %>% unite(지역,도,지역,sep=" ")
dat14$도 <- rep("전남",nrow(dat14))
dat14 <- dat14 %>% unite(지역,도,지역,sep=" ")
dat15$도 <- rep("경북",nrow(dat15))
dat15 <- dat15 %>% unite(지역,도,지역,sep=" ")
dat16$도 <- rep("경남",nrow(dat16))
dat16 <- dat16 %>% unite(지역,도,지역,sep=" ")
dat17$도 <- rep("제주",nrow(dat17))
dat17 <- dat17 %>% unite(지역,도,지역,sep=" ")

dat<-rbind(dat1,dat2,dat3,dat4,dat5,dat6,dat7,dat8,dat9,dat10,dat11,dat12,dat13,dat14,dat15,dat16,dat17)
dat <- dat %>% spread(key=구분,value=X2019)
dat <- dat %>% mutate( region = fct_collapse(지역,
                                               "세종 세종시" = c("세종 세종특별자치시"),
                                               "경기 고양시" = c("경기 고양시 일산동구","경기 고양시 일산서구","경기 고양시 덕양구"),
                                               "경기 성남시"=c("경기 성남시 중원구","경기 성남시 수정구","경기 성남시 분당구"),
                                               "경기 수원시"=c("경기 수원시 팔달구","경기 수원시 장안구","경기 수원시 영통구","경기 수원시 권선구"),
                                               "경기 안산시"=c("경기 안산시 상록구","경기 안산시 단원구"),
                                               "경기 안양시"=c("경기 안양시 만안구","경기 안양시 동안구"),
                                               "경기 용인시"=c("경기 용인시 처인구","경기 용인시 수지구",	"경기 용인시 기흥구"),
                                               "경남 창원시"=c("경남 창원시 진해구","경남 창원시 의창구","경남 창원시 성산구","경남 창원시 마산회원구","경남 창원시 마산합포구"),
                                               "경북 포항시"=c("경북 포항시 북구","경북 포항시 남구"),
                                               "전북 전주시"=c("전북 전주시 완산구","전북 전주시 덕진구"),
                                               "충남 천안시"=c("충남 천안시 서북구","충남 천안시 동남구"),
                                               "충북 청주시" =c("충북 청주시 흥덕구","충북 청주시 청원구","충북 청주시 서원구","충북 청주시 상당구")
)) 


dat <- dat %>% filter( 지역 != "인천 남구") %>% select(-지역)
dat <- dat[,c(7,1,2,3,4,5,6)]
write.csv(dat,"방문자수_r.csv",fileEncoding = "UTF-8")





#############
세개를 하나로 pca 자료 통합

in_outer <- n_new %>% select(region,ratio_ex_in)
visit <-read.csv("방문자수_final (1).csv",header=T) 
visit <- visit %>% select(-X)

tour <- tour %>% separate(region, into = c("region1","region2"),sep=" ")
tour<- tour %>% select(-X)
tour <- tour %>% mutate(region1 = fct_collapse(region1,"강원" = "강원도",
                                               "경기" = "경기도",
                                               "경남" = "경상남도",
                                               "경북"= "경상북도",
                                               "광주"= "광주광역시",
                                               "대구" = "대구광역시",
                                               "대전" = "대전광역시",
                                               "부산" = "부산광역시",  
                                               "서울"= "서울특별시",
                                               "세종" = "세종특별자치시",
                                               "울산" = "울산광역시",
                                               "인천" = "인천광역시",
                                               "전남" = "전라남도",
                                               "전북" = "전라북도",
                                               "제주" = "제주특별자치도",
                                               "충남" = "충청남도",
                                               "충북" =  "충청북도"))

tour <- tour %>% mutate(region2 = fct_collapse(region2,
                                               "세종시"="세종특별자치시", 
                                               "창원시"="통합창원시",
                                               ))

tour <- tour %>% unite(region,region1,region2,sep=" ")
tour <- tibble(tour)
tour <- tour %>% filter(region != "경남 창원시") #tour 자료의 place_num 변수는 사용하지 않기로 함 

sort(unique(in_outer$region))
data_pca1 <- right_join(tour,in_outer)
data_pca2 <- full_join(data_pca1,visit, by="region")
data_pca2 <- data_pca2 %>% select(-외국인,-외지인)
data_pca2$ratio_ex_in[230] <- 0.5463074
data_pca2 <- data_pca2 %>% filter(region != "세종 .")
names(data_pca2) <- c("region","place_num","ratio_ex_in","ratio_visit")
data_pca2$place_num[which(is.na(data_pca2$place_num))] <- 0
write.csv(data_pca2,"pca_data.csv",fileEncoding = "UTF-8")


final <-read.csv(file.choose(),header=T) 
final <- final %>% select(-Column1)
final <-  final %>% group_by(cluster_label) %>% arrange(cluster_label,pca1) 
write.csv(final,"FINAL.csv",fileEncoding = "UTF-8")










######  PYTHON CODE  ######################



######## PCA 

data_pca = pd.read_csv("/Users/gyony/Downloads/pca_data.csv")
data_pca =pd.DataFrame(data_pca)
x = data_pca.drop("region",axis=1)
x = x.drop("Unnamed: 0",axis=1)
x = x.drop("place_num",axis=1)

from sklearn.decomposition import PCA
pca = PCA(n_components=1) # 주성분을 몇개로 할지 결정
printcipalComponents = pca.fit_transform(x)
pcaDF = pd.DataFrame(data=printcipalComponents, columns = ['pca1'])
# 주성분으로 이루어진 데이터 프레임 구성


data_pca['pca1'] = pcaDF['pca1']

data_pca.to_csv("/Users/gyony/Downloads/PCA_result.csv",sep=',', na_rep='NaN',encoding = "UTF-8-sig")






############# 워드 클라우드


f = open('/Users/gyony/Downloads/drive-download-20210721T091912Z-001/전라남도 여행/장성군.txt', mode='r', encoding = "utf-8")
line = f.readline()
print(line)  

numbers_final = line.split(' ')
numbers_final

from collections import Counter
count = Counter(numbers_final) # input type should be a list of words (or tokens)
print(count)
k = 50
print(count.most_common(k)) # 빈도수 기준 상위 k개 단어 출력


from wordcloud import WordCloud
import matplotlib.pyplot as plt
from os import path
from PIL import Image

mask = Image.open("/Users/gyony/Downloads/cloud.png")
mask = np.array(mask)

FONT_PATH = '/Users/gyony/Library/Group Containers/UBF8T346G9.Office/FontCache/4/CloudFonts/Microsoft GothicNeo/28511428043.ttf' # For Korean characters

noun_text = ''
for word in numbers_final:
  noun_text = noun_text+' '+word

wordcloud = WordCloud(max_font_size=70, max_words =80,  mask=mask, background_color='white', relative_scaling=.3, font_path=FONT_PATH, margin=10, random_state=1).generate(noun_text) # generate() 는 하나의 string value를 입력받음
wordcloud.to_file("/Users/gyony/Downloads/wordcloud/wc_전남 장성군.png")
plt.figure(figsize = (10, 10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

################################################

#지역별 클러스터링

#필요한 패키지 import 및 install
import matplotlib.pyplot as plt
%matplotlib inline
plt.rcParams['font.family'] = 'NanumGothic'
import json
import numpy as np
from pandas.io.json import json_normalize
import os
import webbrowser
#!pip install folium
import folium
from folium import plugins
print(folium.__version__)
#!pip install scikit-learn-extra
from sklearn_extra.cluster import KMedoids
from sklearn.cluster import KMeans
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler

#파일 불러오기
df_t=pd.read_csv("C:\\Users\\SamSung\\tour\\cluster_합1.csv",encoding='utf)
df_t_sc=df_t.copy()

#스케일링
df_t_sc.drop(['v4'],axis=1,inplace=True)
mmscaler = MinMaxScaler()
x_scaled = mmscaler.fit_transform(df_t_sc)
x_scaled=pd.DataFrame(x_scaled,columns=df_t_sc.columns, index=df_t_sc.index)

#이너셔 시각화
inertia_arr=[]
k_range=range(2,15)

for k in k_range:
    kmedoids=KMedoids(n_clusters=k,random_state=42)
    kmedoids.fit(x_scaled)
    inin=kmedoids.inertia_
    print('k:',k,'inerita:', inin)
    
    inertia_arr.append(inin)
inertia_arr=np.array(inertia_arr)

plt.plot(k_range,inertia_arr)
save_fig('cluster_inertia_elbow')
plt.show()


#실루엣 계수 시각화
from sklearn.metrics import silhouette_score, silhouette_samples
def visualize_silhouette(cluster_lists, X_features): 
    
    from sklearn.datasets import make_blobs
    import matplotlib.cm as cm
    import math
    
    n_cols = len(cluster_lists)
    
    fig, axs = plt.subplots(figsize=(4*n_cols, 4), nrows=1, ncols=n_cols)
    
    for ind, n_cluster in enumerate(cluster_lists):
        
        clusterer = KMedoids(n_clusters = n_cluster, max_iter=500, random_state=0)
        cluster_labels = clusterer.fit_predict(X_features)
        
        sil_avg = silhouette_score(X_features, cluster_labels)
        sil_values = silhouette_samples(X_features, cluster_labels)
        
        y_lower = 10
        axs[ind].set_title('Number of Cluster : '+ str(n_cluster)+'\n' \
                          'Silhouette Score :' + str(round(sil_avg,3)) )
        axs[ind].set_xlabel("The silhouette coefficient values")
        axs[ind].set_ylabel("Cluster label")
        axs[ind].set_xlim([-0.1, 1])
        axs[ind].set_ylim([0, len(X_features) + (n_cluster + 1) * 10])
        axs[ind].set_yticks([])  # Clear the yaxis labels / ticks
        axs[ind].set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])
        
        for i in range(n_cluster):
            ith_cluster_sil_values = sil_values[cluster_labels==i]
            ith_cluster_sil_values.sort()
            
            size_cluster_i = ith_cluster_sil_values.shape[0]
            y_upper = y_lower + size_cluster_i
            
            color = cm.nipy_spectral(float(i) / n_cluster)
            axs[ind].fill_betweenx(np.arange(y_lower, y_upper), 0, ith_cluster_sil_values, \
                                facecolor=color, edgecolor=color, alpha=0.7)
            axs[ind].text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))
            y_lower = y_upper + 10
            
        axs[ind].axvline(x=sil_avg, color="red", linestyle="--")
    save_fig('silhuette')    
        

def visualize_kmedoids_plot_multi(cluster_lists, X_features):    
    
    n_cols = len(cluster_lists)
    fig, axs = plt.subplots(figsize=(16*n_cols, 16), nrows=1, ncols=n_cols)
    
    pca = PCA(n_components=2)
    pca_transformed = pca.fit_transform(X_features)
    dataframe = pd.DataFrame(pca_transformed, columns=['PCA1','PCA2'])
    
    for ind, n_cluster in enumerate(cluster_lists):
        
        clusterer = KMedoids(n_clusters = n_cluster, max_iter=500, random_state=0)
        cluster_labels = clusterer.fit_predict(pca_transformed)
        dataframe['cluster']=cluster_labels
        
        unique_labels = np.unique(clusterer.labels_)
        markers=['o', 's', '^', 'x', '*','.','1','d',',','v','+','X','D','>','<','2']
       
        for label in unique_labels:
            label_df = dataframe[dataframe['cluster']==label]
            if label == -1:
                cluster_legend = 'Noise'
            else :
                cluster_legend = 'Cluster '+str(label)           
            axs[ind].scatter(x=label_df['PCA1'], y=label_df['PCA2'], s=70,\
                        edgecolor='k', marker=markers[label], label=cluster_legend)

        axs[ind].set_title('Number of Cluster : '+ str(n_cluster))    
        axs[ind].legend(loc='upper right')
    save_fig('clustering_scatter_plot')
    plt.show()

data_features = x_scaled.values

visualize_silhouette([5,6,7,8,9,10],data_features)
visualize_kmedoids_plot_multi([5,6,7,8,9,10],data_features)

#k=8로 클러스터링
k=8
kmedoids=KMedoids(n_clusters=k,random_state=42)
y_pred_med=kmedoids.fit(df_tt)
x_scaled['cluster_label']=kmedoids.labels_

x_scaled['region']=df_t['v4']

#########################################################

1. 네이버 블로그 본문 전체/요약 크롤링(python)
2. 네이버 블로그 텍스트 전처리 1차(python)
3. 네이버 블로그 텍스트 전처리 2차(python)
4. 텍스트 군집 분석(python)
5. 감성분석 (R)



#########1. 네이버 블로그 본문 요약 크롤링(python)##############
import os
import sys
import urllib.request
import json

client_id = "dQpiAFv6zE64JqA4SsOQ"
client_secret = "429hU2_AbB"

def naver_api(where, what, how): 
    
    # where :  뉴스, cafearticle, blog 등등
    # what : 찾을 검색어
    # how : 어떤 파일로 저장할지
    
    encText = urllib.parse.quote(what)
    
    for i in range(1,1001,100):
        url = "https://openapi.naver.com/v1/search/" + where +"?query=" + encText +"&display=100" + '&start=' + str(i) + "&sort=sim"
        
        request = urllib.request.Request(url)
        request.add_header("X-Naver-Client-Id",client_id)
        request.add_header("X-Naver-Client-Secret",client_secret)
        response = urllib.request.urlopen(request)
        rescode = response.getcode()
        if(rescode==200):
            response_body = response.read()
            results = response_body.decode('utf-8') # 사람 언어로 바꾸는 코드
            # print(response_body.decode('utf-8'))
            items = json.loads(results)['items'] # 딕셔너리로 바꿔주는 코드

            for item in items:
                f = open(how, 'a', encoding = "utf-8")
                #title = item['title']
                description = item['description']

                #title = title.replace('<b>', '')
                #title = title.replace('</b>','')
                description = description.replace('<b>', '')
                description = description.replace('</b>','')
                description = description.replace('...', '')
                description = description.replace('\n',' ')

                #f.write(title + '\n')
                f.write(description + '\n')
                f.close()
        else:
            print("Error Code:" + rescode)


# 경기도
Gyeonggido = ['고양시', '과천시', '광명시', '광주시', '구리시', '군포시', '김포시', '남양주시', '동두천시', '부천시','성남시', '수원시', '시흥시', '안산시', '안성시', '안양시', '양주시', '여주시', '오산시', '용인시','의왕시', '의정부시', '이천시', '파주시', '평택시', '포천시', '하남시', '화성시', '가평군', '양평군', '연천군']

for region in Gyeonggido:
    naver_api('blog','경기도' + ' ' + region + '' + '여행', str(region)+'.txt')

# 경상남도

Gyeongsangnamdo = ['거제시', '김해시', '밀양시', '사천시', '양산시', '진주시', '창원시', '통영시',
'거창군', '고성군', '남해군', '산청군', '의령군', '창녕군', '하동군', '함안군',
'함양군', '합천군']

for region in Gyeongsangnamdo:
    naver_api('blog','경상남도' + ' ' + region + '' + '여행', str(region)+'.txt')

# 경상북도

Gyeongsangbukdo = ['경산시', '경주시', '구미시', '김천시', '문경시', '상주시', '안동시', '영주시', '영천시', '포항시','고령군', '군위군', '봉화군', '성주군', '영덕군', '영양군', '예천군', '울릉군', '울진군', '의성군', '청도군',
'청송군', '칠곡군']

for region in Gyeongsangbukdo:
    naver_api('blog','경상북도' + ' ' + region + '' + '여행', str(region)+'.txt')


#전라남도

Jeollanamdo = ['광양시', '나주시', '목포시', '순천시', '여수시', '강진군', '고흥군', '곡성군', '구례군', '담양군', '무안군', '보성군', '신안군', '영광군', '영암군', 
'완도군', '장성군', '장흥군', '진도군', '함평군', '해남군', '화순군' ]

for region in Jeollanamdo:
    naver_api('blog','전라남도' + ' ' + region + '' + '여행', str(region)+'.txt')

#전라북도

Jeollabukdo = ['군산시', '김제시', '남원시', '익산시', '전주시', '정읍시', '고창군', '무주군', '부안군', '순창군', '완주군', '임실군', '장수군', '진안군' ]

for region in Jeollabukdo:
    naver_api('blog','전라북도' + ' ' + region + '' + '여행', str(region)+'.txt') 


#세종특별자치시

Sejong = ['세종시']

for region in Sejong:
    naver_api('blog', region + '' + '여행', str(region)+'.txt')


#제주특별자치도

Jeju = ['제주시', '서귀포시']

for region in Jeju:
    naver_api('blog', '제주도' + region + '' + '여행', str(region)+'.txt')


#서울특별시

seoul = ['종로구', '중구', '용산구', '성동구', '광진구', '동대문구', '중랑구', 
         '성북구', '강북구', '도봉구', '노원구', '은평구','서대문구', '마포구', 
         '양천구', '강서구', '구로구', '금천구', '영등포구', '동작구', '관악구', 
         '서초구', '강남구', '송파구', '강동구' ]

for region in seoul:
    naver_api('blog','서울' + ' ' + region + '' + '여행', str(region)+'.txt')


#강원도

gangwon = ['강릉시', '동해시', '삼척시', '속초시', '원주시', '춘천시', '태백시',
           '고성군', '양구군', '양양군', '영월군', '인제군', '정선군', '철원군', 
           '평창군', '홍천군', '화천군', '횡성군']

for region in gangwon:
    naver_api('blog','강원도' + ' ' + region + '' + '여행', str(region)+'.txt')


#충청북도

chungbuk = ['제천시', '청주시', '충주시', '괴산군', '단양군', '보은군', 
            '영동군', '옥천군', '음성군', '증평군', '진천군' ]

for region in chungbuk:
    naver_api('blog','충청북도' + ' ' + region + '' + '여행', str(region)+'.txt')


#충청남도
chungnam = ['계룡시', '공주시', '논산시', '당진시', '보령시', '서산시', 
            '아산시', '천안시', '금산군', '부여군', '서천군', '예산군', 
            '청양군', '태안군', '홍성군']

for region in chungnam:
    naver_api('blog','충청남도' + ' ' + region + '' + '여행', str(region)+'.txt')


#부산광역시
busan = ['중구', '서구', '동구', '영도구', '부산진구', '동래구', '남구', 
         '북구', '해운대구', '사하구', '금정구', '강서구', '연제구', '수영구', 
         '사상구','기장군']

for region in busan:
    naver_api('blog','부산' + ' ' + region + '' + '여행', str(region)+'.txt')


#대구광역시
daegu = ['중구', '동구', '서구', '남구', '북구', '수성구', '달서구','달성군']

for region in daegu:
    naver_api('blog','대구' + ' ' + region + '' + '여행', str(region)+'.txt')


#인천광역시
incheon = ['중구', '동구', '미추홀구', '연수구', '남동구', 
           '부평구', '계양구', '서구', '강화군', '옹진군']

for region in incheon:
    naver_api('blog','인천' + ' ' + region + '' + '여행', str(region)+'.txt')


#대전광역시
daejeon = ['동구', '중구', '서구', '유성구', '대덕구']

for region in daejeon:
    naver_api('blog','대전' + ' ' + region + '' + '여행', str(region)+'.txt')


#울산광역시
ulsan = ['중구', '남구', '동구', '북구', '울주군']

for region in ulsan:
    naver_api('blog','울산' + ' ' + region + '' + '여행', str(region)+'.txt')


#광주광역시
gwangju = ['동구', '서구', '남구', '북구', '광산구']


for region in gwangju:
    naver_api('blog','광주' + ' ' + region + '' + '여행', str(region)+'.txt')



#########1. 네이버 블로그 본문 전체 크롤링(python)##############

from selenium import webdriver
import time
 
# 크롬 웹브라우저 실행
path = "C:/Users/82105/Downloads/chromedriver_win32/chromedriver.exe"
 
driver = webdriver.Chrome(path)
url_list = []
title_list = []
content_list = []




for i in range(0,20):  # 1~20페이지까지의 블로그 내용을 읽어옴
    url = 'https://section.blog.naver.com/Search/Post.nhn?pageNo='+ str(i+1) + '&rangeType=ALL&orderBy=sim&keyword=' + '경기도' + ' ' + '양주시' + ' ' + '여행'

    driver.get(url)
    time.sleep(1)
 
    for j in range(1, 8): # 각 블로그 주소 저장
        titles = driver.find_element_by_xpath('/html/body/ui-view/div/main/div/div/section/div[2]/div['+str(j)+']/div/div[1]/div[1]/a[1]')
        title = titles.get_attribute('href')
        url_list.append(title)

     
        
print("url 수집 끝, 해당 url 데이터 크롤링")
 

dict = {}  # 전체 크롤링 데이터를 담을 그릇

# 수집할 글 갯수

for i in range(len(url_list)): 
    # 글 띄우기
    driver = webdriver.Chrome("C:/Users/82105/Downloads/chromedriver_win32/chromedriver.exe")
    driver.get(url_list[i])   # 글 띄우기
    
    
    # 크롤링
    
    try : 
        # iframe 접근
        driver.switch_to_frame('mainFrame')

        target_info = {}

        # 제목 크롤링 시작
        overlays = ".se-fs-.se-ff-"                                 
        tit = driver.find_element_by_css_selector(overlays)         # title
        title = tit.text
        title

        # 글쓴이 크롤링 시작
        overlays = ".nick"                                 
        nick = driver.find_element_by_css_selector(overlays)         # nick
        nickname = nick.text
       # 날짜 크롤링
        overlays = ".se_publishDate.pcol2"                                 
        date = driver.find_element_by_css_selector(overlays)         # date
        datetime = date.text

        # 내용 크롤링
        overlays = ".se-component.se-text.se-l-default"                                 
        contents = driver.find_elements_by_css_selector(overlays)         # content

        content_list = []
        for content in contents:
            content_list.append(content.text)

        content_str = ' '.join(content_list)

        # 글 하나는 target_info라는 딕셔너리에 담기게 되고,
        target_info['title'] = title
        target_info['nickname'] = nickname
        target_info['datetime'] = datetime
        target_info['content'] = content_str
        
        # 각각의 글은 dict라는 딕셔너리에 담기게 됩니다.
        dict[i] = target_info
        time.sleep(1)
        
        print(i, title)

        # 글 하나 크롤링 후 크롬 창 닫기
        driver.close()       
    
    # 에러나면 다음 글(i+1)로 이동
    except:
        driver.close()
#        print("에러나는 글: " + i + ", " + title)
        continue

print('수집한 글 갯수: ', len(dict))
print(dict)    
    
# 데이터 프레임으로 만들기
import pandas as pd
result_df = pd.DataFrame.from_dict(dict, 'index')

# 저장하기
result_df.to_excel("C:/Users/82105/Desktop/data/네이버블로그_본문전체_크롤링/경기도_양주시_4.xlsx")



#########2. 네이버 블로그 텍스트 전처리 1차(python)##############
import os

path = 'C:/Users/82105/Desktop/data/네이버블로그_크롤링/서울특별시/'
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py

#지역별 텍스트 불러오기 
f = open('C:/Users/82105/Desktop/data/네이버블로그_크롤링/서울특별시/중랑구.txt', 'r', encoding = 'utf-8')
txt = f.readlines()
f.close() 


# 텍스트 데이터 전처리 함수
import re
def clean_str(text):
    pattern = '([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)' # E-mail제거
    text = re.sub(pattern=pattern, repl='', string=text)
    pattern = '(http|ftp|https)://(?:[-\w.]|(?:%[\da-fA-F]{2}))+' # URL제거
    text = re.sub(pattern=pattern, repl='', string=text)
    pattern = '([ㄱ-ㅎㅏ-ㅣ]+)'  # 한글 자음, 모음 제거
    text = re.sub(pattern=pattern, repl='', string=text)
    pattern = '<[^>]*>'         # HTML 태그 제거
    text = re.sub(pattern=pattern, repl='', string=text)
    pattern = '[^\w\s]'         # 특수기호제거
    text = re.sub(pattern=pattern, repl='', string=text)
    pattern = '[0-9]+'          # 숫자제거
    text = re.sub(pattern=pattern, repl='', string=text)
    return text   


# 텍스트 데이터 전처리 함수 적용
clean_txt = []
for i in range(len(txt)):
    clean_txt.append(clean_str(txt[i]))


# 명사 찾는 함수 만들기(Kkma 클래스 이용)
from konlpy.tag import Kkma
kkma = Kkma()
def find_noun(txt):
    noun_list = []
    for i in txt:
        nouns = kkma.nouns(i)
        for noun in nouns:
            noun_list.append(noun)
    return noun_list

noun_list = find_noun(clean_txt)


#한글자 명사 제거 
noun_f_list = []
for i,v in enumerate(noun_list):
    if len(v)>=2:
        text2 = noun_list.pop(i)
        noun_f_list.append(text2)


# 불용어 사전 만들기 (지역 관광 특성을 나타내지 않는 명사, 지역명과 같은 고유명사 포함)
stop_word = '울릉도 독도 북도 남도 있음 주소 위치 여행 관광 번호 영업 시간 지역 계획 관리 이번 가성 강릉여행 강원도여행 댓글 도착 영업시간 우리 전화번호 다음 주차장 안녕 한번 포스팅 번째 정도 하나 소개 여기 최대 리뷰 투어 공유 이웃신청 첫날 나라 지방 홈페이지 아 휴 아이구 아이쿠 아이고 어 나 우리 저희 따라 의해 을 를 에 의 가 으로 로 에게 뿐이다 의거하여 근거하여 입각하여 기준으로 예하면 예를 들면 예를 들자면 저 소인 소생 저희 지말고 하지마 하지마라 다른 물론 또한 그리고 비길수 없다 해서는 안된다 뿐만 아니라 만이 아니다 만은 아니다 막론하고 관계없이 그치지 않다 그러나 그런데 하지만 든간에 논하지 않다 따지지 않다 설사 비록 더라도 아니면 만 못하다 하는 편이 낫다 불문하고 향하여 향해서 향하다 쪽으로 틈타 이용하여 타다 오르다 제외하고 이 외에 이 밖에 하여야 비로소 한다면 몰라도 외에도 이곳 여기 부터 기점으로 따라서 할 생각이다 하려고하다 이리하여 그리하여 그렇게 함으로써 하지만 일때 할때 앞에서 중에서 보는데서 으로써 로써 까지 해야한다 일것이다 반드시 할줄알다 할수있다 할수있어 임에 틀림없다 한다면 등 등등 제 겨우 단지 다만 할뿐 딩동 댕그 대해서 대하여 대하면 훨씬 얼마나 얼마만큼 얼마큼 남짓 여 얼마간 약간 다소 좀 조금 다수 몇 얼마 지만 하물며 또한 그러나 그렇지만 하지만 이외에도 대해 말하자면 뿐이다 다음에 반대로 반대로 말하자면 이와 반대로 바꾸어서 말하면 바꾸어서 한다면 만약 그렇지않으면 까악 툭 딱 삐걱거리다 보드득 비걱거리다 꽈당 응당 해야한다 에 가서 각 각각 여러분 각종 각자 제각기 하도록하다 와 과 그러므로 그래서 고로 한 까닭에 하기 때문에 거니와 이지만 대하여 관하여 관한 과연 실로 아니나다를가 생각한대로 진짜로 한적이있다 하곤하였다 하 하하 허허 아하 거바 와 오 왜 어째서 무엇때문에 어찌 하겠는가 무슨 어디 어느곳 더군다나 하물며 더욱이는 어느때 언제 야 이봐 어이 여보시오 흐흐 흥 휴 헉헉 헐떡헐떡 영차 여차 어기여차 끙끙 아야 앗 아야 콸콸 졸졸 좍좍 뚝뚝 주룩주룩 솨 우르르 그래도 또 그리고 바꾸어말하면 바꾸어말하자면 혹은 혹시 답다 및 그에 따르는 때가 되어 즉 지든지 설령 가령 하더라도 할지라도 일지라도 지든지 몇 거의 하마터면 인젠 이젠 된바에야 된이상 만큼 어찌됏든 그위에 게다가 점에서 보아 비추어 보아 고려하면 하게될것이다 일것이다 비교적 좀 보다더 비하면 시키다 하게하다 할만하다 의해서 연이서 이어서 잇따라 뒤따라 뒤이어 결국 의지하여 기대여 통하여 자마자 더욱더 불구하고 얼마든지 마음대로 주저하지 않고 곧 즉시 바로 당장 하자마자 밖에 안된다 하면된다 그래 그렇지 요컨대 다시 말하자면 바꿔 말하면 즉 구체적으로 말하자면 시작하여 시초에 이상 허 헉 허걱 바와같이 해도좋다 해도된다 게다가 더구나 하물며 와르르 팍 퍽 펄렁 동안 이래 하고있었다 이었다 에서 로부터 까지 예하면 했어요 해요 함께 같이 더불어 마저 마저도 양자 모두 습니다 가까스로 하려고하다 즈음하여 다른 다른 방면으로 해봐요 습니까 했어요 말할것도 없고 무릎쓰고 개의치않고 하는것만 못하다 하는것이 낫다 매 매번 들 모 어느것 어느 로써 갖고말하자면 어디 어느쪽 어느것 어느해 어느 년도 라 해도 언젠가 어떤것 어느것 저기 저쪽 저것 그때 그럼 그러면 요만한걸 그래 그때 저것만큼 그저 이르기까지 할 줄 안다 할 힘이 있다 너 너희 당신 어찌 설마 차라리 할지언정 할지라도 할망정 할지언정 구토하다 게우다 토하다 메쓰겁다 옆사람 퉤 쳇 의거하여 근거하여 의해 따라 힘입어 그 다음 버금 두번째로 기타 첫번째로 나머지는 그중에서 견지에서 형식으로 쓰여 입장에서 위해서 단지 의해되다 하도록시키다 뿐만아니라 반대로 전후 전자 앞의것 잠시 잠깐 하면서 그렇지만 다음에 그러한즉 그런즉 남들 아무거나 어찌하든지 같다 비슷하다 예컨대 이럴정도로 어떻게 만약 만일 위에서 서술한바와같이 인 듯하다 하지 않는다면 만약에 무엇 무슨 어느 어떤 아래윗 조차 한데 그럼에도 불구하고 여전히 심지어 까지도 조차도 하지 않도록 않기 위하여 때 시각 무렵 시간 동안 어때 어떠한 하여금 네 예 우선 누구 누가 알겠는가 아무도 줄은모른다 줄은 몰랏다 하는 김에 겸사겸사 하는바 그런 까닭에 한 이유는 그러니 그러니까 때문에 그 너희 그들 너희들 타인 것 것들 너 위하여 공동으로 동시에 하기 위하여 어찌하여 무엇때문에 붕붕 윙윙 나 우리 엉엉 휘익 윙윙 오호 아하 어쨋든 만 못하다 하기보다는 차라리 하는 편이 낫다 흐흐 놀라다 상대적으로 말하자면 마치 아니라면 쉿 그렇지 않으면 그렇지 않다면 안 그러면 아니었다면 하든지 아니면 이라면 좋아 알았어 하는것도 그만이다 어쩔수 없다 하나 일 일반적으로 일단 한켠으로는 오자마자 이렇게되면 이와같다면 전부 한마디 한항목 근거로 하기에 아울러 하지 않도록 않기 위해서 이르기까지 이 되다 로 인하여 까닭으로 이유만으로 이로 인하여 그래서 이 때문에 그러므로 그런 까닭에 알 수 있다 결론을 낼 수 있다 으로 인하여 있다 어떤것 관계가 있다 관련이 있다 연관되다 어떤것들 에 대해 이리하여 그리하여 여부 하기보다는 하느니 하면 할수록 운운 이러이러하다 하구나 하도다 다시말하면 다음으로 에 있다 에 달려 있다 우리 우리들 오히려 하기는한데 어떻게 어떻해 어찌됏어 어때 어째서 본대로 자 이 이쪽 여기 이것 이번 이렇게말하자면 이런 이러한 이와 같은 요만큼 요만한 것 얼마 안 되는 것 이만큼 이 정도의 이렇게 많은 것 이와 같다 이때 이렇구나 것과 같이 끼익 삐걱 따위 와 같은 사람들 부류의 사람들 왜냐하면 중의하나 오직 오로지 에 한하다 하기만 하면 도착하다 까지 미치다 도달하다 정도에 이르다 할 지경이다 결과에 이르다 관해서는 여러분 하고 있다 한 후 혼자 자기 자기집 자신 우에 종합한것과같이 총적으로 보면 총적으로 말하면 총적으로 대로 하다 으로서 참 그만이다 할 따름이다 쿵 탕탕 쾅쾅 둥둥 봐 봐라 아이야 아니 와아 응 아이 참나 년 월 일 령 영 일 이 삼 사 오 육 륙 칠 팔 구 이천육 이천칠 이천팔 이천구 하나 둘 셋 넷 다섯 여섯 일곱 여덟 아홉 령 영 이 있 하 것 들 그 되 수 이 보 않 없 나 사람 주 아니 등 같 우리 때 년 가 한 지 대하 오 말 일 그렇 위하 때문 그것 두 말하 알 그러나 받 못하 일 그런 또 문제 더 사회 많 그리고 좋 크 따르 중 나오 가지 씨 시키 만들 지금 생각하 그러 속 하나 집 살 모르 적 월 데 자신 안 어떤 내 내 경우 명 생각 시간 그녀 다시 이런 앞 보이 번 나 다른 어떻 여자 개 전 들 사실 이렇 점 싶 말 정도 좀 원 잘 통하 놓'
st_ls = stop_word.split(' ')

stop_word_region = '서울특별시 서울시 서울 종로구 중구 용산구 성동구 광진구 동대문구 중랑구 성북구 강북구 도봉구 노원구 은평구 서대문구 마포구 양천구 강서구 구로구 금천구 영등포구 동작구 관악구 서초구 강남구 송파구 강동구 서울여행 서울시여행 서울특별시여행 종로 용산 성동 광진 중랑 성북 강북 도봉 노원 은평 마포 양천 강서 구로 금천 영등포 동작 관악 서초 강남 송파 강동 부산광역시 부산시 부산 중구 서구 동구 영도구 부산진구 동래구 남구 북구 해운대구 사하구 금정구 강서구 연제구 수영구 사상구 기장군 부산여행 부산광역시여행 부산시여행 영도 부산진 동래 사하 금정 연제 사상 기장 해운대 대구광역시 대구시 대구 수성구 달서구 달성군 수성 달서 달성 대구여행 대구광역시여행 대구시여행 인천광역시 인천시 인천 미추홀구 연수구 남동구 부평구 계양구 강화군 옹진군 인천여행 인천광역시여행 인천시여행 미추홀 연수 남동 부평 계양 강화 옹진 대전광역시 대전시 대전 유성구 대덕구 유성 대덕 대전여행 대전광역시여행 대전시여행 울산광역시 울산시 울산 울주군 울주 울산여행 울산광역시여행 울산시여행 광주광역시 광주시 광주 광산구 광산 광주여행 광주광역시 여행 광주시여행 강원도 강원 강릉시 동해시 삼척시 속초시 원주시 춘천시 태백시 고성군 양구군 양양군 영월군 인제군 정선군 철원군 평창군 홍천군 화천군 횡성군 강릉 삼척 속초 원주 춘천 태백 고성 양구 양양 영월 인제 정선 철원 평창 홍천 화천 횡성 강원도여행 강원여행 충청북 충청북도 충청도 충청 충북 제천 청주 충주 제천시 청주시 충주시 충청도여행 충청여행 충북여행 충남여행 충청북도여행 충청남도여행 괴산군 단양군 보은군 영동군 옥천군 음성군 증평군 진천군 괴산 단양 보은 영동 옥천 음성 증평 진천 충청남도 충청북 충청남 충남 계룡시 공주시 논산시 당진시 보령시 서산시 아산시 천안시 계룡 공주 논산 당진 보령 서산 아산 천안 금산군 부여군 서천군 예산군 청양군 태안군 홍성군 금산 부여 서천 예산 청양 태안 홍성 경기도 경기 고양시 과천시 광명시 광주시 구리시 군포시 김포시 남양주시 동두천시 부천시 성남시 수원시 시흥시 안산시 안성시 안양시 양주시 여주시 오산시 용인시 의왕시 의정부시 이천시 파주시 평택시 포천시 하남시 화성시 가평군 양평군 연천군 경기도여행 경기여행 고양 과천 광명 구리 군포 김포 남양주 동두천 부천 성남 수원 시흥 안산 안성 안양 양주 여주 오산 용인 의왕 의정부 이천 파주 평택 포천 하남 화성 가평 양평 연천 경상남도 경상도 경상 경남 경남여행 경상여행 경상도여행 경상남도여행 경상북도여행 경상북 경상남 거제시 김해시 밀양시 사천시 양산시 진주시 창원시 통영시 거제 김해 밀양 사천 양산 진주 창원 통영 거창군 고성군 남해군 산청군 의령군 창녕군 하동군 함안군 함양군 합천군 거창 고성 산청 의령 창녕 하동 함안 함양 합천 경상북도 경북 경북여행 경산시 경주시 구미시 김천시 문경시 상주시 안동시 영주시 영천시 포항시 경산 경주 구미 김천 문경 상주 안동 영주 영천 포항 고령군 군위군 봉화군 성주군 영덕군 영양군 예천군 울릉군 울진군 의성군 청도군 청송군 칠곡군 고령 군위 봉화 성주 영덕 영양 예천 울릉 울진 의성 청도 청송 칠곡 전라남도 전라도 전남 전라 광양시 나주시 목포시 순천시 여수시 광양 나주 목포 순천 여수 전라여행 전라도여행 전라북도여행 전라남도여행 전라남 전라북 전남여행 전북여행 강진군 고흥군 곡성군 구례군 담양군 무안군 보성군 신안군 영광군 영암군 강진 고흥 곡성 구례 담양 무안 보성 신안 영광 영암 완도군 장성군 장흥군 진도군 함평군 해남군 화순군 완도 장성 장흥 진도 함평 해남 화순 전라북도 전북 군산시 김제시 남원시 익산시 전주시 정읍시 군산 김제 남원 익산 전주 정읍 고창군 무주군 부안군 순창군 완주군 임실군 장수군 진안군 고창 무주 부안 순창 완주 임실 장수 진안'
st_ls2 = stop_word_region.split(' ')

st_ls.extend(st_ls2)


# 불용어 제거 
fffnal_ls = []
for word in noun_f_list:
    if word not in st_ls:
        fffnal_ls.append(word)
final = ' '.join(fffnal_ls)


# 1차 전처리 후 저장
f = open("C:/Users/82105/Desktop/지자체/서울특별시/중랑구.txt", 'w', encoding="UTF8")
f.write(final)
f.close()



#########3. 네이버 블로그 텍스트 전처리 2차(python)############## (지역명을 포함하는 명사 모두 제거)
import os
import pandas as pd 

path = 'C:/Users/82105/Desktop/지자체/서울특별시/'
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] #해당 폴더에 있는 모든 txt 파일 불러오기

file_list_py 


# 폴더에 있는 txt 파일 내용 저장 자동화
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    #globals()['variable{}'.format(i)] = globals()['variable{}'.format(i)].split()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])


# 불용어 제거 (지역명 포함 단어 모두 삭제)
import re
def clean_str(text):
    
    pattern = '특별|여행|관광|서울|종로|용산|성동|광진|중랑|성북|세종|제주|서귀포|강북|도봉|노원|은평|마포|양천|강서|구로|금천|영등포|동작|관악|서초|강남|송파|강동|부산|중구|서구|동구|부산진|동래|사하|금정|연제|사상|기장|해운대구|대구|수성|달서|달성|인천|미추홀|연수|남동|부평|계양|강화|옹진|대전|유성|대덕|울산|울주|광주|광산|강원|강릉|삼척|속초|원주|춘천|태백|고성|양구|양양|영월|인제|정선|철원|평창|홍천|화천|횡성|충청|충북|제천|청주|충주|충남|괴산|단양|보은|영동|옥천|음성|증평|진천|충청남도|계룡|공주|논산|당진|보령|서산|아산|천안|금산|부여|서천|예산|청양|태안|홍성|경기|고양|과천|광명|구리|군포|김포|남양주|동두천|부천|성남|수원|시흥|안산|안성|안양|양주|여주|오산|용인|의왕|의정부|이천|파주|평택|포천|하남|화성|가평|양평|연천|경상|경남|경북|거제|김해|밀양|사천|양산|진주|창원|통영|거창|고성|산청|의령|창녕|하동|함안|함양|합천|경상북도|경산|경주|구미|김천|문경|상주|안동|영주|영천|포항|고령|군위|봉화|성주|영덕|영양|예천|울릉|울진|의성|청도|청송|칠곡|전라|전남|광양|나주|목포|순천|여수|전북|강진|고흥|곡성|구례|담양|무안|보성|신안|영광|영암|완도|장성|장흥|진도|함평|해남|화순|전북|군산|김제|남원|익산|전주|정읍|고창|무주|부안|순창|완주|임실|장수|진안|울릉도|독도|북도|남도|있음|주소|위치|여행|관광|번호|영업|시간|지역|계획|관리|이번|가성|댓글|도착|우리|다음|주차|안녕|한번|포스팅|번째|정도|하나|소개|여기|최대|리뷰|오늘|투어|공유|이웃신청|첫날|나라|지방|홈페이지|저희'
    text = re.sub(pattern=pattern, repl='', string=text)
    
    return text   


vars_clean = []
for i in range(len(file_list_py)):
    vars_clean.append(clean_str(vars[i]))

for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = vars_clean[i].split()


# 한글자 단어 제거 함수
def find_noun(nouns):
    noun_list=[]
    for j,v in enumerate(nouns):
        if len(v)>=2:
            nouns2 = nouns.pop(j)
            noun_list.append(nouns2)
            
    return noun_list

for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = find_noun(globals()['variable{}'.format(i)])

vars_noun = []
for i in range(len(file_list_py)):
   
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars_noun.append(globals()['variable{}'.format(i)])
    

# 2차 전처리 후 txt파일로 저장
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/서울특별시/'

for i in range(len(file_list_py)):
    open(path+file_list_py[i], 'w',encoding = 'utf-8').write(vars_noun[i])  



#########4. 텍스트 군집 분석(python)##############

#변수로 사용할 영어, 한글 지역명 가져오기 

import pandas as pd

region_name = pd.read_csv('C:/Users/82105/Desktop/data/지역명 한글.csv', encoding="utf-8")
region_name

#강원도

# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/강원도/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py


# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])


gangwon = region_name['region'][0:18]
gangwon = gangwon.tolist()


# dictionary에 지역명은 key값, 명사 키워드는 value값으로 할당
reg1 = {}
for i in range(len(vars)):
    reg1[gangwon[i]] = vars[i]
reg1


# 경기도
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/경기도/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py


# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

gyeonggi = region_name['region'][18:49]
gyeonggi = gyeonggi.tolist()

reg2 = {}
for i in range(len(vars)):
    reg2[gyeonggi[i]] = vars[i]


#경상남도

import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/경상남도/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py

# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

gyeongnam = region_name['region'][49:67]
gyeongnam = gyeongnam.tolist()

reg3= {}
for i in range(len(vars)):
    reg3[gyeongnam[i]] = vars[i]


# 경상북도

import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/경상북도/'
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py

# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

gyeongbuk = region_name['region'][67:90]
gyeongbuk = gyeongbuk.tolist()

reg4= {}
for i in range(len(vars)):
    reg4[gyeongbuk[i]] = vars[i]

#광주광역시

# 텍스트 파일 불러오기

import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/광주광역시/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py

# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])


gwangju = region_name['region'][90:95]
gwangju = gwangju.tolist()
gwangju

reg5= {}
for i in range(len(vars)):
    reg5[gwangju[i]] = vars[i]

# 대구광역시

# 텍스트 파일 불러오기

import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/대구광역시/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py


# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

daegu = region_name['region'][95:103]
daegu = daegu.tolist()
daegu

reg6= {}
for i in range(len(vars)):
    reg6[daegu[i]] = vars[i]

# 대전광역시
# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/대전광역시/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py

# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

daejeon = region_name['region'][103:108]
daejeon = daejeon.tolist()
daejeon

reg7= {}
for i in range(len(vars)):
    reg7[daejeon[i]] = vars[i]

# 부산광역시
# 텍스트 파일 불러오기

import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/부산광역시/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py

# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])
busan = region_name['region'][108:124]
busan = busan.tolist()
busan

reg8= {}
for i in range(len(vars)):
    reg8[busan[i]] = vars[i]


# 서울특별시
# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/서울특별시/' 
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py

# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

seoul = region_name['region'][124:149]
seoul = seoul.tolist()
seoul

reg9= {}
for i in range(len(vars)):
    reg9[seoul[i]] = vars[i]

# 세종특별자치시
# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/세종특별자치시/' 
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py


# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])
sejong = region_name['region'][149]

sejong


reg10= {}
for i in range(len(vars)):
    reg10[sejong] = vars[i]

# 울산광역시
# 텍스트 파일 불러오기

import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/울산광역시/' 
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py

# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

ulsan = region_name['region'][150:155]
ulsan = ulsan.tolist()
ulsan


reg11 = {}
for i in range(len(vars)):
    reg11[ulsan[i]] = vars[i]


# 인천광역시
# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/인천광역시/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py


# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

incheon = region_name['region'][155:165]
incheon = incheon.tolist()
incheon


reg12 = {}
for i in range(len(vars)):
    reg12[incheon[i]] = vars[i]


# 전라남도
# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/전라남도/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py


# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

jeonnam = region_name['region'][165:187]
jeonnam = jeonnam.tolist()
jeonnam


reg13 = {}
for i in range(len(vars)):
    reg13[jeonnam[i]] = vars[i]


# 전라북도
# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/전라북도/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py


# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

jeonbuk = region_name['region'][187:201]
jeonbuk = jeonbuk.tolist()
jeonbuk


reg14 = {}
for i in range(len(vars)):
    reg14[jeonbuk[i]] = vars[i]

# 제주특별자치도
# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/제주특별자치도/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py


# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])


jeju = region_name['region'][201:203]
jeju = jeju.tolist()
jeju


reg15 = {}
for i in range(len(vars)):
    reg15[jeju[i]] = vars[i]


# 충청남도
# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/충청남도/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py


# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])


chungnam = region_name['region'][203:218]
chungnam = chungnam.tolist()
chungnam



reg16 = {}
for i in range(len(vars)):
    reg16[chungnam[i]] = vars[i]


# 충청북도
# 텍스트 파일 불러오기
import os
path = 'C:/Users/82105/Desktop/텍스트 전처리_2차_최종/noun_keyword/충청북도/' # 여행 부분만 바꿔주기
file_list = os.listdir(path)
file_list_py = [file for file in file_list if file.endswith('.txt')] 

file_list_py

# 각 텍스트 파일 불러오기
vars = []
for i in range(len(file_list_py)):
    globals()['variable{}'.format(i)] = open(path + file_list_py[i], 'r', encoding = 'utf-8').readlines()
    globals()['variable{}'.format(i)] = ' '.join(globals()['variable{}'.format(i)])
    vars.append(globals()['variable{}'.format(i)])

chungbuk = region_name['region'][218:229]
chungbuk = chungbuk.tolist()
chungbuk

reg17 = {}
for i in range(len(vars)):
    reg17[chungbuk[i]] = vars[i]

#딕셔너리 합치기

reg1.update(reg2)
reg1.update(reg3)
reg1.update(reg4)
reg1.update(reg5)
reg1.update(reg6)
reg1.update(reg7)
reg1.update(reg8)
reg1.update(reg9)
reg1.update(reg10)
reg1.update(reg11)
reg1.update(reg12)
reg1.update(reg13)
reg1.update(reg14)
reg1.update(reg15)
reg1.update(reg16)
reg1.update(reg17)
final = reg1

# 총 개수 확인
len(final)


region = []
info = []
for key in final.keys():
    region.append(key)
for value in final.values():
    info.append(value)

#TF-IDF 벡터화

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer() # TF-IDF 만드는 모델
tfidf_vectorizer.fit(info) # 전체 문서인 info를 모델에 적용

# 모든 지역을 벡터화 시킴
tfidf_vect = tfidf_vectorizer.transform(info).toarray()
tfidf_vect


data_df = pd.DataFrame(tfidf_vect)
data_df

# K-Means
from sklearn.cluster import KMeans

import pandas as pd
import numpy as np
import tensorflow as tf
import seaborn as sns
import matplotlib.pyplot as plt

%matplotlib inline
# k-means 클러스터링 모델 생성
model = KMeans(n_clusters = 8, max_iter = 1000, random_state = 1234)
model.fit(tfidf_vect)
model.fit_predict(tfidf_vect)


pred = model.fit_predict(tfidf_vect)
pred is model.labels_

model.cluster_centers_

a = model.transform(tfidf_vect)
a

transform_data = pd.DataFrame(a, columns = ['c1','c2','c3','c4','c5','c6','c7','c8'])
transform_data

region = pd.DataFrame(region)
region

distance = pd.concat([region_name['region1'], transform_data], axis=1)
distance


distance.to_csv("C:/Users/82105/Desktop/data/cluster_distance.csv", index = False, encoding = "utf-8-sig")


#군집 평가
import pandas as pd

n_iter_cluster = 20 # 최대 군집 생성 개수
cluster_range = [i+1 for i in range(n_iter_cluster)]
clus_error = []
for v_n_clus in cluster_range:
    clus = KMeans(v_n_clus)
    clus.fit(tfidf_vect)
  # 각 데이터로부터 가장 가까운 군집 중심점까지 거리 제곱합
    clus_error.append(clus.inertia_)
ds_error = pd.DataFrame({"Number of Cluster":cluster_range, "Error":clus_error})
ds_error


# 이너셔- 군집별 군집 중심점까지 거리 제곱합을 시각화
plt.figure(figsize=(10,10))
plt.plot(ds_error["Number of Cluster"], ds_error["Error"])
plt.title("Sum of squared distance")
plt.xlabel("Clusters")
plt.ylabel("Sum of squared distance")


# 어떤 군집으로 분류되었는지 라벨링
model.labels_

name = []
name = model.labels_.tolist()

# name 
df = pd.DataFrame({'region':region_name['region1'],
                   'cluster':name})
df


# 실루엣
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score, silhouette_samples




def visualize_silhouette(cluster_lists, X_features): 
    
    from sklearn.datasets import make_blobs
    from sklearn.cluster import KMeans
    from sklearn.metrics import silhouette_samples, silhouette_score

    import matplotlib.pyplot as plt
    import matplotlib.cm as cm
    import math
    
    # 입력값으로 클러스터링 갯수들을 리스트로 받아서, 각 갯수별로 클러스터링을 적용하고 실루엣 개수를 구함
    n_cols = len(cluster_lists)
    
    # plt.subplots()으로 리스트에 기재된 클러스터링 만큼의 sub figures를 가지는 axs 생성 
    fig, axs = plt.subplots(figsize=(4*n_cols, 4), nrows=1, ncols=n_cols)
    
    # 리스트에 기재된 클러스터링 갯수들을 차례로 iteration 수행하면서 실루엣 개수 시각화
    for ind, n_cluster in enumerate(cluster_lists):
        
        # KMedoids 클러스터링 수행하고, 실루엣 스코어와 개별 데이터의 실루엣 값 계산. 
        clusterer = KMeans(n_clusters = n_cluster, max_iter=500, random_state=0)
        cluster_labels = clusterer.fit_predict(X_features)
        
        sil_avg = silhouette_score(X_features, cluster_labels)
        sil_values = silhouette_samples(X_features, cluster_labels)
        
        y_lower = 10
        axs[ind].set_title('Number of Cluster : '+ str(n_cluster)+'\n' \
                          'Silhouette Score :' + str(round(sil_avg,3)) )
        axs[ind].set_xlabel("The silhouette coefficient values")
        axs[ind].set_ylabel("Cluster label")
        axs[ind].set_xlim([-0.1, 1])
        axs[ind].set_ylim([0, len(X_features) + (n_cluster + 1) * 10])
        axs[ind].set_yticks([])  # Clear the yaxis labels / ticks
        axs[ind].set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])
        
        # 클러스터링 갯수별로 fill_betweenx( )형태의 막대 그래프 표현. 
        for i in range(n_cluster):
            ith_cluster_sil_values = sil_values[cluster_labels==i]
            ith_cluster_sil_values.sort()
            
            size_cluster_i = ith_cluster_sil_values.shape[0]
            y_upper = y_lower + size_cluster_i
            
            color = cm.nipy_spectral(float(i) / n_cluster)
            axs[ind].fill_betweenx(np.arange(y_lower, y_upper), 0, ith_cluster_sil_values, \
                                facecolor=color, edgecolor=color, alpha=0.7)
            axs[ind].text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))
            y_lower = y_upper + 10
            
        axs[ind].axvline(x=sil_avg, color="red", linestyle="--")
        
        

### 여러개의 클러스터링 갯수를 List로 입력 받아 각각의 클러스터링 결과를 시각화 
def visualize_kmeans_plot_multi(cluster_lists, X_features):
    
    from sklearn.cluster import KMeans
    from sklearn.decomposition import PCA
    import pandas as pd
    import numpy as np
    
    # plt.subplots()으로 리스트에 기재된 클러스터링 만큼의 sub figures를 가지는 axs 생성 
    n_cols = len(cluster_lists)
    fig, axs = plt.subplots(figsize=(10*n_cols, 10), nrows=1, ncols=n_cols)
    
    # 입력 데이터의 FEATURE가 여러개일 경우 2차원 데이터 시각화가 어려우므로 PCA 변환하여 2차원 시각화
    pca = PCA(n_components=2)
    pca_transformed = pca.fit_transform(X_features)
    dataframe = pd.DataFrame(pca_transformed, columns=['PCA1','PCA2'])
    
     # 리스트에 기재된 클러스터링 갯수들을 차례로 iteration 수행하면서 KMeans 클러스터링 수행하고 시각화
    for ind, n_cluster in enumerate(cluster_lists):
        
        # KMedoids 클러스터링으로 클러스터링 결과를 dataframe에 저장. 
        clusterer = KMeans(n_clusters = n_cluster, max_iter=500, random_state=0)
        cluster_labels = clusterer.fit_predict(pca_transformed)
        dataframe['cluster']=cluster_labels
        
        unique_labels = np.unique(clusterer.labels_)
        markers=['o', 's', '^', 'x', '*','.','1','d',',','v','+','X']
       
        # 클러스터링 결과값 별로 scatter plot 으로 시각화
        for label in unique_labels:
            label_df = dataframe[dataframe['cluster']==label]
            if label == -1:
                cluster_legend = 'Noise'
            else :
                cluster_legend = 'Cluster '+str(label)           
            axs[ind].scatter(x=label_df['PCA1'], y=label_df['PCA2'], s=70,\
                        edgecolor='k', marker=markers[label], label=cluster_legend)

        axs[ind].set_title('Number of Cluster : '+ str(n_cluster))    
        axs[ind].legend(loc='upper right')
    
    plt.show()




data_features = tfidf_vect



visualize_silhouette([2,3,4,5,6,7,8,9,10],data_features)
visualize_kmeans_plot_multi([2,3,4,5,6,7,8,9,10],data_features)



df.to_csv("C:/Users/82105/Desktop/data/cluster_result2.csv", encoding = "utf-8-sig", index = False)




#########5. 감성분석 (R)##############

```{r}
#감성 사전 불러오기
library(dplyr)
library(readr)
dic <- read_csv("C:/Users/82105/Desktop/data/knu_senti_dict.csv")


```


```{r}
#감성 분석을 위한 라이브러리 불러오기
library(stringr)
```




```{r}
# 실제 텍스트 데이터 불러오기
library(readxl)
raw_news_comment <- read_excel("C:/Users/82105/Desktop/data/crawling/충청북도_증평군_2.xlsx")

```

```{r}
# 결측치 행 제거
raw_news_comment = raw_news_comment[!is.na(raw_news_comment$content), ]
```

```{r}
# 기본적인 전처리  

library(textclean)
news_comment <- raw_news_comment %>%
  mutate(id = row_number(),
         content = str_squish(replace_html(content)))


# 데이터 구조 확인
glimpse(news_comment)

```

```{r}

library(tidytext)

# 토큰화
word_comment <- news_comment %>%
  unnest_tokens(input = content,
                output = word,
                token = "words",
                drop = F)
word_comment %>%
  select(word, content)


```

```{r}

# 감정 점수 부여
word_comment <- word_comment %>%
  left_join(dic, by = "word") %>%
  mutate(polarity = ifelse(is.na(polarity), 0, polarity))
word_comment %>%
  select(word, polarity)

```

```{r}
#댓글별 감정 점수 구하고 댓글 살펴보기
score_comment <- word_comment %>% group_by(id, content) %>% summarise(score = sum(polarity)) %>% ungroup()
score_comment %>% select(score, content)
```

```{r}

#감정 점수 높은 댓글 살펴보기
#긍정 댓글
score_comment %>% select(score, content) %>% arrange(-score)

#부정 댓글
score_comment %>% select(score, content) %>% arrange(score)

```

```{r}

write.csv(score_comment, "C:/Users/82105/Desktop/data/네이버블로그_감성분석_결과/충청북도_증평군_2.csv")

```


```{r}
boxplot(score_comment$score)
q <- boxplot(score_comment$score)$stats
```

```{r}
# 결측값 제거하고 지역별 평균 구하기 -> 최종 감성 점수

score_comment$score <- ifelse(score_comment$score < q[2]| score_comment$score > q[4], NA, score_comment$score)

score_comment = na.omit(score_comment)

senti_score = mean(score_comment$score)
senti_score
```
